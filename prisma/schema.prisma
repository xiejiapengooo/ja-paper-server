generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum PaperLevel {
  N1
  N2
  N3
  N4
  N5
}

enum SectionType {
  VOCAB_GRAMMAR // 言語知識（文字・語彙・文法）
  READING // 読解
  LISTENING // 聴解
}

enum AnswerType {
  SINGLE_CHOICE // 单选题
  MULTI_CHOICE // 多选题
}

enum CertificateType {
  REFRESH_TOKEN
  PASSWORD_RESET
  REGISTER
}

enum UserStatus {
  ACTIVED
  PENDING
  DISABLED
}

enum PaperFileType {
  AUDIO
  VIDEO
  IMAGE
}

model User {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  email        String         @unique
  name         String?
  role         UserRole
  status       UserStatus
  password     String
  UserQuestion UserQuestion[]
}

model Certificate {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  expiredAt DateTime
  usedAt    DateTime?
  userAgent String          @db.Text
  content   String          @unique @db.Text
  type      CertificateType
  relatedId String?

  @@index([relatedId, type])
}

model UserQuestion {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId   String
  question     PaperQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  lastAnswerAt DateTime
  answer       String        @db.Text
  note         String?       @db.Text

  @@unique([userId, questionId])
}

model Paper {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  level       PaperLevel
  year        Int
  month       Int
  title       String     @db.VarChar(255)
  description String?    @db.Text

  sections  PaperSection[]
  parts     PaperPart[]
  questions PaperQuestion[]

  @@index([level, year, month])
}

model PaperPart {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  title          String
  duration       Int
  listeningAudio String?
  order          Int

  paperId String
  paper   Paper  @relation(fields: [paperId], references: [id], onDelete: Cascade)

  sections  PaperSection[]
  questions PaperQuestion[]
}

model PaperSection {
  id                       String      @id @default(cuid())
  createdAt                DateTime    @default(now())
  updatedAt                DateTime    @updatedAt
  partId                   String
  part                     PaperPart   @relation(fields: [partId], references: [id])
  paperId                  String
  paper                    Paper       @relation(fields: [paperId], references: [id], onDelete: Cascade)
  type                     SectionType
  title                    String      @db.VarChar(255)
  order                    Int
  content                  String?     @db.Text
  contentTranslationZhHans String?     @db.Text
  imageContent             String?

  questions PaperQuestion[]
}

model PaperQuestion {
  id                                String       @id @default(cuid())
  createdAt                         DateTime     @default(now())
  updatedAt                         DateTime     @updatedAt
  paperId                           String
  paper                             Paper        @relation(fields: [paperId], references: [id], onDelete: Cascade)
  partId                            String
  part                              PaperPart    @relation(fields: [partId], references: [id])
  sectionId                         String
  section                           PaperSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  answerType                        AnswerType
  order                             Int
  prompt                            String       @db.Text
  analysis                          String?      @db.Text
  listeningAudio                    String?
  listeningContent                  String?      @db.Text
  listeningContentTranslationZhHans String?      @db.Text

  choices       QuestionChoice[]
  userQuestions UserQuestion[]
}

model QuestionChoice {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  label      String        @db.VarChar(8)
  text       String        @db.Text
  order      Int
  isCorrect  Boolean
  questionId String
  question   PaperQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}
